{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","setupClient","client","setState","startClient","once","state","prevState","res","console","log","isClientReady","className","Header","this","Component","Login","handleChange","event","target","id","value","handleSubmit","sdk","createClient","server","login","username","password","then","response","catch","err","alert","message","preventDefault","onSubmit","type","autoComplete","placeholder","onChange","required","Chat","setCurrentRoomId","roomId","currentRoomId","sendMessage","text","content","body","msgtype","sendEvent","messages","on","room","toStartOfTimeline","getType","roomMessages","push","eventId","getId","date","getDate","toLocaleString","getContent","senderName","sender","name","currentMessages","RoomSelect","selectedRoom","rooms","selectedRoomId","undefined","getRooms","map","key","listOptions","listRooms","MessageList","listItems","listMessages","SendMessageForm","href","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f6a08015.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport sdk from 'matrix-js-sdk';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      client: null,\n      isClientReady: false,\n    };\n  }\n\n  setupClient = client => {\n    this.setState({client: client});\n    client.startClient();\n    client.once('sync', (state, prevState, res) => {\n      console.log(state);\n      this.setState({isClientReady: true});\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Header />\n        {\n          this.state.isClientReady ?\n            <Chat client={this.state.client}/> :\n            <Login setupClient={this.setupClient} />\n        }\n      </div>\n    )\n  }\n}\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      server: \"https://matrix.org\",\n      username: '',\n      password: '',\n    };\n  }\n\n  handleChange = event => this.setState({[event.target.id]: event.target.value});\n\n  handleSubmit = event => {\n    const client = sdk.createClient(this.state.server);\n    client.login(\"m.login.password\", {\"user\": this.state.username, \"password\": this.state.password})\n      .then(response => this.props.setupClient(client))\n      .catch(err => alert(err.message));\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <div className=\"col-sm-5 mx-auto\">\n      <form onSubmit={this.handleSubmit}>\n\n        <div className=\"form-group\">\n          <div className=\"input-group flex-nowrap\">\n            <div className=\"input-group-prepend\">\n              <span className=\"input-group-text\"><i className=\"fas fa-at fa-fw\"></i></span>\n            </div>\n            <input className=\"form-control\" id=\"server\" type=\"url\" autoComplete=\"url\" placeholder='Server URL' value={this.state.server} onChange={this.handleChange} required />\n          </div>\n        </div>\n\n        <div className=\"form-group\">\n          <div className=\"input-group flex-nowrap\">\n            <div className=\"input-group-prepend\">\n              <span className=\"input-group-text\"><i className=\"fas fa-user fa-fw\"></i></span>\n            </div>\n            <input className=\"form-control\" id=\"username\" type=\"text\" autoComplete=\"username\" placeholder='Username' value={this.state.username} onChange={this.handleChange} required />\n          </div>\n        </div>\n\n        <div className=\"form-group\">\n          <div className=\"input-group flex-nowrap\">\n            <div className=\"input-group-prepend\">\n              <span className=\"input-group-text\"><i className=\"fas fa-key fa-fw\"></i></span>\n            </div>\n            <input className=\"form-control\" id=\"password\" type=\"password\" autoComplete=\"current-password\" placeholder='Password' value={this.state.password} onChange={this.handleChange} required />\n          </div>\n        </div>\n\n        <input className=\"btn btn-outline-primary btn-block\" type=\"submit\" value=\"Log in\" />\n      </form>\n        </div>\n    )\n  }\n}\n\nclass Chat extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      messages: {},\n      currentRoomId: null,\n    };\n  }\n\n  setCurrentRoomId = roomId => {\n    this.setState({currentRoomId: roomId});\n  }\n\n  sendMessage = text => {\n    const roomId = this.state.currentRoomId;\n    if (roomId === null) {\n      return;\n    }\n    const content = {\n      body: text,\n      msgtype: \"m.text\"\n    };\n    this.props.client.sendEvent(roomId, \"m.room.message\", content, \"\")\n      .then(response => {console.log(\"message sent successfully\")})\n      .catch(err => {console.log(err)});\n  }\n\n  componentDidMount() {\n    this.props.client.on(\"Room.timeline\", (event, room, toStartOfTimeline) => {\n      if (event.getType() !== \"m.room.message\") {\n          return;\n      }\n      const { messages } = this.state\n      const roomMessages = room.roomId in messages ? messages[room.roomId] : []\n      roomMessages.push({\n        eventId: event.getId(),\n        date: event.getDate().toLocaleString(),\n        body: event.getContent().body,\n        senderName: event.sender.name,\n      })\n      this.setState(prevState => ({\n        messages: {\n          ...prevState.messages,\n          [room.roomId]: roomMessages,\n        }\n      }));\n    });\n  }\n\n  render() {\n    const { currentRoomId, messages } = this.state\n    const currentMessages = currentRoomId in messages ? messages[currentRoomId] : []\n    return (\n      <div className=\"chat\">\n        <RoomSelect client={this.props.client} setCurrentRoomId={this.setCurrentRoomId} />\n        <MessageList messages={currentMessages} />\n        <SendMessageForm sendMessage={this.sendMessage} />\n      </div>\n    );\n  }\n}\n\nclass RoomSelect extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rooms: [],\n      selectedRoomId: undefined,\n    };\n  }\n\n  handleChange = event => {\n    var roomId = event.target.value\n    this.setState({selectedRoom: roomId});\n    this.props.setCurrentRoomId(roomId)\n  }\n\n  componentDidMount() {\n    const rooms = this.props.client.getRooms()\n    this.setState({rooms: rooms});\n  }\n\n  listRooms() {\n    const { rooms } = this.state;\n    return rooms.map(room =>\n      <option key={room.roomId} value={room.roomId}>{room.name}</option>\n    );\n  }\n\n  render() {\n    const listOptions = this.listRooms()\n    return (\n      <div className=\"input-group flex-nowrap mb-3\">\n        <div className=\"input-group-prepend\">\n          <span className=\"input-group-text\">Current room</span>\n        </div>\n        <select className=\"custom-select\" value={this.state.selectedRoomId} onChange={this.handleChange}>\n          {listOptions}\n        </select>\n      </div>\n    );\n  }\n}\n\nclass MessageList extends Component {\n  listMessages() {\n    const { messages } = this.props;\n    return messages.map(message =>\n      <li className=\"message\" key={message.eventId}>\n        <div>{message.senderName} - {message.date}</div>\n        <div>{message.body}</div>\n      </li>\n    );\n  }\n\n  render() {\n    const listItems = this.listMessages()\n    return (\n      <ul className=\"message-list\">\n        {listItems}\n      </ul>\n    )\n  }\n}\n\nclass SendMessageForm extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      message: ''\n    }\n  }\n\n  handleChange = event => {\n    this.setState({message: event.target.value})\n  }\n\n  handleSubmit = event => {\n    this.props.sendMessage(this.state.message)\n    this.setState({message: ''})\n    event.preventDefault()\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <div className=\"input-group flex-nowrap\">\n          <input className=\"form-control\" type=\"text\" placeholder=\"Type your message\" value={this.state.message} onChange={this.handleChange} />\n          <div className=\"input-group-append\">\n            <button className=\"btn btn-outline-secondary\" type=\"submit\"><i className=\"fas fa-comment-dots\"></i></button>\n          </div>\n        </div>\n      </form>\n    )\n  }\n}\n\nfunction Header() {\n  return (\n    <header className=\"text-center mb-3\">\n      <h1>Tiny <a href=\"https://matrix.org/\"><img src=\"https://matrix.org/images/matrix-logo.svg\" alt=\"\" /></a> client</h1>\n    </header>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
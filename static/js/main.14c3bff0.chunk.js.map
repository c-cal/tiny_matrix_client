{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","setupClient","client","setState","startClient","once","state","prevState","res","console","log","isClientReady","this","Component","Login","handleChange","event","target","id","value","handleSubmit","sdk","createClient","server","login","username","password","then","response","catch","err","alert","message","preventDefault","onSubmit","type","autoComplete","placeholder","onChange","Chat","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qUAIMA,G,mBACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAORC,YAAc,SAAAC,GACZ,EAAKC,SAAS,CAACD,OAAQA,IACvBA,EAAOE,cACPF,EAAOG,KAAK,QAAQ,SAACC,EAAOC,EAAWC,GACrCC,QAAQC,IAAIJ,GACZ,EAAKH,SAAS,CAACQ,eAAe,QAXhC,EAAKL,MAAQ,CACXJ,OAAQ,KACRS,eAAe,GAJA,E,sEAkBjB,OACEC,KAAKN,MAAMK,cAAgB,kBAAC,EAAD,CAAMT,OAAQU,KAAKN,MAAMJ,SAAY,kBAAC,EAAD,CAAOD,YAAaW,KAAKX,kB,GApB7EY,cAyBZC,E,YACJ,WAAYd,GAAQ,IAAD,8BACjB,4CAAMA,KAQRe,aAAe,SAAAC,GAAK,OAAI,EAAKb,SAAL,eAAgBa,EAAMC,OAAOC,GAAKF,EAAMC,OAAOE,SATpD,EAWnBC,aAAe,SAAAJ,GACb,IAAMd,EAASmB,IAAIC,aAAa,EAAKhB,MAAMiB,QAC3CrB,EAAOsB,MAAM,mBAAoB,CAAC,KAAQ,EAAKlB,MAAMmB,SAAU,SAAY,EAAKnB,MAAMoB,WACnFC,MAAK,SAAAC,GAAQ,OAAI,EAAK5B,MAAMC,YAAYC,MACxC2B,OAAM,SAAAC,GAAG,OAAIC,MAAMD,EAAIE,YAC1BhB,EAAMiB,kBAdN,EAAK3B,MAAQ,CACXiB,OAAQ,qBACRE,SAAU,GACVC,SAAU,IALK,E,sEAoBjB,OACE,0BAAMQ,SAAUtB,KAAKQ,cACnB,2BAAG,2BAAOF,GAAG,SAASiB,KAAK,MAAMC,aAAa,MAAMC,YAAY,aAAalB,MAAOP,KAAKN,MAAMiB,OAAQe,SAAU1B,KAAKG,gBACtH,2BAAG,2BAAOG,GAAG,WAAWiB,KAAK,OAAOC,aAAa,WAAWC,YAAY,WAAWlB,MAAOP,KAAKN,MAAMmB,SAAUa,SAAU1B,KAAKG,gBAC9H,2BAAG,2BAAOG,GAAG,WAAWiB,KAAK,WAAWC,aAAa,mBAAmBC,YAAY,WAAWlB,MAAOP,KAAKN,MAAMoB,SAAUY,SAAU1B,KAAKG,gBAC1I,2BAAOoB,KAAK,SAAShB,MAAM,gB,GA1BfN,aAgCd0B,E,iLAEF,OAAO,4C,GAFQ1B,aAMJd,ICvDKyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,kB","file":"static/js/main.14c3bff0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport sdk from 'matrix-js-sdk';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      client: null,\n      isClientReady: false,\n    };\n  }\n\n  setupClient = client => {\n    this.setState({client: client});\n    client.startClient();\n    client.once('sync', (state, prevState, res) => {\n      console.log(state);\n      this.setState({isClientReady: true});\n    });\n  }\n\n  render() {\n    return (\n      this.state.isClientReady ? <Chat client={this.state.client}/> : <Login setupClient={this.setupClient} />\n    )\n  }\n}\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      server: \"https://matrix.org\",\n      username: '',\n      password: '',\n    };\n  }\n\n  handleChange = event => this.setState({[event.target.id]: event.target.value});\n\n  handleSubmit = event => {\n    const client = sdk.createClient(this.state.server);\n    client.login(\"m.login.password\", {\"user\": this.state.username, \"password\": this.state.password})\n      .then(response => this.props.setupClient(client))\n      .catch(err => alert(err.message));\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <p><input id=\"server\" type=\"url\" autoComplete=\"url\" placeholder='Server URL' value={this.state.server} onChange={this.handleChange} /></p>\n        <p><input id=\"username\" type=\"text\" autoComplete=\"username\" placeholder='Username' value={this.state.username} onChange={this.handleChange} /></p>\n        <p><input id=\"password\" type=\"password\" autoComplete=\"current-password\" placeholder='Password' value={this.state.password} onChange={this.handleChange} /></p>\n        <input type=\"submit\" value=\"Log in\" />\n      </form>\n    )\n  }\n}\n\nclass Chat extends Component {\n  render() {\n    return <h1>Chat !!!</h1>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}